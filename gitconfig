[color]
  ui = true
  interactive = auto
  editor = vim
  pager = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[core]
  pager = diff-so-fancy
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol,space-before-tab
  autocrlf = input
  eol = lf
  excludesfile = ~/.gitignore

[mergetool "fugitive"]
  cmd = vim -f -c \"Gdiff\" \"$MERGED\"

[merge]
  tool = fugitive
  #tool = diffuse
  #tool = vimdiff
  #tool = meld

#[sendemail]
#  smtpserver = mail.jukie.net

[alias]
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  amend = commit --amend -C HEAD
  br = branch
  cat = -p cat-file -p
  cds = !git ds --cached
  checkoutnext = !git checkout `git findnext`
  ci = commit --verbose
  co = checkout
  #cvscommit = !git --git-dir=`cat CVS/GitDir` cvsexportcommit -c -p -v
  debug = !GIT_PAGER= gdb --args git
  df = diff
  d = diff
  #dirstatus = !ls -d1 */.git | xargs -n1 -i{} sh -c \"cd {}/.. && echo Checking {} && git ls-files --exclude-standard -tousmd\"
  ds = diff --stat
  edit-last-commit = !vim `git diff-tree -r --name-only HEAD HEAD~1`
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  file-blame = !git ls-files | xargs -n1 -i{} git log -1 --pretty=format:\"%ci {}\" -- {}
  findnext = rev-list --reverse -n1 HEAD..master
  fp = format-patch
  l = log -n 1 -p
  last = cat-file commit HEAD
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lgn = "!f() { git log --graph --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative $@ | git name-rev --stdin --name-only ; } ; f"
  log1 = log --pretty=oneline --abbrev-commit --decorate
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ls = ls-files
  me = merge --no-ff --no-commit
  nvgc = !ionice -n7 nice -n20 git vgc
  push-head = !git push origin `git symbolic-ref HEAD`
  pushall = !git remote | xargs -n1 git push
  pushalltags = !git remote | xargs -n1 git push --tags
  s = "!git diff --name-status | sed -e 's/^/W /' ; git diff --cached --name-status | sed -e 's/^/C /'"
  st = status -sb
  #st = "!f() { git ls-files --exclude-standard -t -u -s -m -d $@ | sed -e 's/C.*\t/C /' ; } ; f"
  #sto = st -o
  # example: git subdo pull
  subdo = submodule foreach git
  svnup = !git config --get-regexp 'svn-remote.*url' | cut -d . -f 2 | xargs -n1 git svn fetch
  #test = !sh -c 'echo cmd=$1 arg1=$2 arg2=$3'
  top = !eval cd "$(pwd)/$(git rev-parse --show-cdup)" && pwd
  up = !git remote update ; git gc
  vgc = repack -f -a -d --depth=250 --window=250
  dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy; }; f"

[branch "master"]
  mergeoptions = --no-commit

[push]
  default = current

[pack]
  threads = 4

[gc]
  reflogexpire = 300
  reflogexpireunreachab

[giggle]
  compact-mode = false
  main-window-maximized = true
  main-window-geometry = 498x283+0+56

[help]
  format = man
  autocorrect  = -1

[achievement]
  upload = true

[branch]
  autosetuprebase = always

[hub]
  protocol = ssh

[commit]
    gpgsign = false

[gpg]
    program = gpg

[include]
    path = .gitconfig.user
