#!/usr/bin/env bash

function run {
  if ! pgrep $1 ;
  then
    $@&
  fi
}

#change your keyboard if you need it
#setxkbmap -layout be

# Autostart applications
pkill -u $USER '^compton$'
compton --config $HOME/.config/herbstluftwm/compton.conf &
# compton --config /home/baptiste/.config/compton.conf &
# /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &

xsetroot -solid '#000000'
xsetroot -cursor_name left_ptr &

#keybindings are in config of sxhkd - interchangeable with other TWM
# run sxhkd -c $HOME/.config/herbstluftwm/sxhkd/sxhkdrc &
# wal -i ~/.config/herbstluftwm/fantasy-landscape2.jpg
wal -nRa 90 &
# feh --bg-scale ~/.config/herbstluftwm/fantasy-landscape2.jpg &
$HOME/.fehbg &
run conky -c $HOME/.conkyrc &
albert &
# run mpd &
#run variety &
# run nm-applet &
#pamac-tray &
# xinput set-prop 13 302 1 &
# run redshift-gtk
# run syncthing-gtk -m &
#xfce4-power-manager &
# run dunst &
# numlockx on &
# run blueberry-tray &
#xfsettingsd &
# nitrogen --restore &
# caffeine &
# vivaldi-stable &
# firefox &
# thunar &
# dropbox &
# run insync start &
# discord &
# spotify &
# atom &

#herbstluftwm start
hc() {
  herbstclient "$@"
}

hc emit_hook reload

# KEYBINDINGS

# remove all existing keybindings
hc keyunbind --all

# if you have a super key you will be much happier with Mod set to Mod4
#Mod=Mod1  # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-x quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-q close
hc keybind $Mod-q close

hc keybind $Mod-Return spawn "${TERMINAL:-kitty}" # use your $TERMINAL with xterm as fallback
hc keybind $Mod-m spawn rofi -show run -terminal "${TERMINAL:-kitty}"
# Albert is launched and uses it's own key
# hc keybind $Mod-m spawn albert

#Most of the keybindings have been set in sxhkd config file
#you can set them also here

#reload sxhkd:
# hc keybind $Mod-Shift-s  pkill -USR1 -x sxhkd

# MOVEMENTS

# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# Frames

# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode
# remove frame
hc keybind $Mod-r remove

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# TAGS or WORKSPACES

#names to display in menu
tag_names=( {1..10} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    # horizontal tiling as standard
    hc set_layout horizontal
    hc set default_frame_layout 1
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" chain , move_index "$i" , use_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Shift-f set_attr clients.focus.floating toggle
hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
# restore all minimized windows of the focused tag
hc keybind $Mod-Ctrl-m foreach CLIENT clients. \
     sprintf MINATT "%c.minimized" CLIENT \
     sprintf TAGATT "%c.tag" CLIENT and \
       , compare MINATT "=" "true" \
       , substitute FOCUS "tags.focus.name" compare TAGATT "=" FOCUS \
       , set_attr MINATT false
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus on ...
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-i jumpto urgent

#reset prior to setting the theme
hc attr theme.reset 1

# Attribute
hc attr theme.active.color '#FFFFFF'
hc attr theme.active.inner_color '#4c566a'
hc attr theme.active.outer_color '#FFFFFF'
hc attr theme.background_color '#4c566a'
hc attr theme.border_width 5
hc attr theme.floating.border_width 5
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.inner_color black
hc attr theme.inner_width 1
hc attr theme.normal.color '#4c566a'
hc attr theme.urgent.color orange

# Set
hc set always_show_frame 1
hc set focus_follows_mouse 1
hc set frame_border_active_color '#ffffff'
hc set frame_border_normal_color '#4c566a'
hc set frame_bg_normal_color '#4c566a'
hc set frame_bg_active_color '#ffffff'
hc set frame_border_width 5
hc set frame_bg_transparent 1
hc set frame_transparent_width 0
hc set frame_gap 8
hc set frame_padding 0
hc set mouse_recenter_gap 0
hc set smart_frame_surroundings 1
hc set smart_window_surroundings 0
hc set tree_style '╾│ ├└╼─┐'
hc set window_gap 10

# Rules
hc unrule -F
hc rule focus=on # normally focus new clients
hc rule floatplacement=smaront

# assign applications to workspaces or tags
# hc rule class~'(firefox|Vivaldi-stable|Vivaldi-snapshot|Chromium|Google-chrome)' tag=1  focus=on
# hc rule class~'(Subl3|code-oss)' tag=2 focus=on
# hc rule class=Gimp tag=5
# hc rule class=krita tag=5
# hc rule class~'(Meld|ristretto|Nitrogen)' tag=5
# hc rule class=vlc tag=4 focus=on
# hc rule class=qBittorrent tag=7 focus=on
# hc rule class=discord tag=9 focus=on
# hc rule class=TelegramDesktop tag=9 focus=on
# hc rule class~'(VirtualBox Manager|Vmplayer)' tag=7
# hc rule class~'(Thunar|Nemo|Caja|Nautilus)' tag=8
# hc rule class~'(Evolution|Geary)' tag=9
# hc rule class=Spotify tag=10

# give focus to most common terminals
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
hc rule class=Oblogout fullscreen=on
hc rule class=Insync pseudotile=on
hc rule class=VirtualBox fullscreen=on

# unlock, just to be sure
hc unlock

hc detect_monitors

# single polybar at top
hc pad 0 40

# Launch polybar
[ -x ~/.config/polybar/launch.sh ] && ~/.config/polybar/launch.sh

# Autostart applications
[ -x ~/bin/autostart.sh ] && ~/bin/autostart.sh
# XXX this seems necessary as load from .xinitrc seems uneffective
[ -r ~/.Xmodmap ] && xmodmap ~/.Xmodmap
# Use right control as compose key
setxkbmap -option compose:rctrl
