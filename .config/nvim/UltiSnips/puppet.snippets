#########################################################################
#  Python helper code                                                   #
#########################################################################

# :help UltiSnips
# http://bazaar.launchpad.net/~sirver/ultisnips/trunk/view/head:/doc/UltiSnips.txt

# Snippets options
# * b: snippet should be at beginning of line

global !p
import vim
import os.path
def get_module_namespace_and_basename():
  """This function will try to guess the current class or define name you are
  trying to create. Note that for this to work you should be using the module
  structure as per the style guide. Examples inputs and it's output
  * /home/nikolavp/puppet/modules/collectd/manifests/init.pp -> collectd
  * /home/nikolavp/puppet/modules/collectd/manfistes/mysql.pp -> collectd::mysql
  """
  first_time = True
  current_file_path_without_ext = vim.eval('expand("%:p:r")') or ""
  if not current_file_path_without_ext:
    return "name"
  parts = os.path.split(current_file_path_without_ext)
  namespace = ''
  while parts[0] and parts[0] != '/':
    if parts[1] == 'init' and first_time and not namespace:
      first_time = False
      parts = os.path.split(parts[0])
      continue
    if parts[1] == 'manifests':
      return os.path.split(parts[0])[1] + ('::' + namespace).rstrip(':')
    else:
      namespace = parts[1] + '::' + namespace
    parts = os.path.split(parts[0])
  # couldn't guess the namespace. The user is editing a raw file in no module like the site.pp file
  return "name"
endglobal

###############################################################################
#  Puppet Language Constructs                                                 #
#    See http://docs.puppetlabs.com/puppet/latest/reference/lang_summary.html #
###############################################################################
snippet file "File resource type" b
file { '${1:name}':
  ensure  => '${2:file}',
  owner   => '${3:root}',
  group   => '${4:root}',
  mode    => '${5:0644}',
  source  => 'puppet:///modules/${6:module}/${7:source}',
  content => template('${8:template}'),
  require => [ Package['${10:package}'], File['${11:file}'], ],
}
endsnippet

snippet package "Package resource type" b
package { '${1:name}':
  ensure => '${2:installed}',
}
endsnippet

snippet service "Service resource type" b
service { '${1:name}':
  ensure    => '${2:running}',
  enable    => ${3:true},
  hasstatus => ${4:true},
}
endsnippet

snippet class
class { '${1}':
  ${2}
}

# vim: set et sta sw=2 ts=2 sts=2 noci noai:
endsnippet

snippet firewall
firewall { '050 Open port ${1}':
  dport  => $1,
  action => 'accept',
}
endsnippet

snippet file_line "file_line (stdlib) resource type" b
file_line { '${1:name}':
  ensure   => '${2:present}',
  path     => '${3:/temp/test.txt}',
  line     => '${4:installed}',
  after    => '${5}',
  match    => '${6}',
  multiple => '${7:false}',
}
endsnippet

snippet =os "selector on OS" b
= $::operatingsystem ? {
  /(redhat|centos)/ => 'bin',
  /(ubuntu|debian)/ => 'bin',
  default           => undef,
}
endsnippet

snippet = "selector on OS family" b
= $::osfamily ? {
  'Debian' => 'bin',
  'RedHat' => 'bin',
  default  => undef,
}
endsnippet

# Header to match http://docs.puppetlabs.com/guides/style_guide.html#puppet-doc
snippet classheader "Class declaration" b
# == Class: ${1:`!p snip.rv = get_module_namespace_and_basename()`}
#
# ${2:Full description of class $1 here}
#
# === Parameters
#
# Document parameters here.
#
# [*parameter1*]
#   Explanation of what this parameter affects and what it defaults to.
#   e.g. "Specify one or more upstream ntp servers as an array."
#
# === Examples
#
#  include ::$1
#
# Configuration is done using Hiera.
#
# === Authors
#
# `!v g:snips_author` <`!v g:snips_author_email`>
#
# === Copyright
#
# Copyright `!v strftime("%Y")` `!v g:snips_company`
#
class $1 (${3}) {
  notify { 'Hellow world from ::$1!': }
}

# vim: set et sta sw=2 ts=2 sts=2 noci noai:
endsnippet

# Header to match http://docs.puppetlabs.com/guides/style_guide.html#puppet-doc
snippet defineheader "Define declaration" b
# == Define: ${1:`!p snip.rv = get_module_namespace_and_basename()`}
#
# ${2:Full description of define $1 here}
#
# === Parameters
#
# Document parameters here.
#
# [*parameter1*]
#   Explanation of what this parameter affects and what it defaults to.
#   e.g. "Specify one or more upstream ntp servers as an array."
#
# === Examples
#
#  '$1' { 'namevar':
#    parameter1 => [ 'just', 'an', 'example', ]
#  }
#
# === Authors
#
# `!v g:snips_author` <`!v g:snips_author_email`>
#
# === Copyright
#
# Copyright `!v strftime("%Y")` `!v g:snips_company`
#
define $1 (${3}) {
  ${4}
}

# vim: set et sta sw=2 ts=2 sts=2 noci noai:
endsnippet

snippet versioncmp_inf "Test if a is < b"
versioncmp(${1}, '${2}') == -1
endsnippet

snippet versioncmp_equal "Test if a is == b"
versioncmp(${1}, '${2}') == 0
endsnippet

snippet versioncmp_sup_equal "Test if a is >= b"
versioncmp(${1}, '${2}') > -1
endsnippet

snippet versioncmp_sup "Test if a is > b"
versioncmp(${1}, '${2}') > 0
endsnippet

snippet notify "Notify"
notify { "${1}": }
endsnippet

# vim:ft=snippets:
