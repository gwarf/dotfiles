snippet _skel "Shell skeleton" b
#!/bin/sh
$0

exit 0

# vim:set ft=sh ts=2 sw=2 et:
endsnippet

snippet exit_script_on_error "Exit script on errors" b
# Exit on first error even when using | and on unset variable
set -eo pipefail -u
endsnippet

snippet header "File Header" b
###########################################################################
#
# Script: ${1:`!v expand("%:t")`}
# Usage:  $1 ${2:parameters}
# Description: ${3:Short description}
# ${4:Full description of $1 here}
#
# Version: ${5:0.0.1}
#
# Project: ${6:project} `!v strftime("%Y")`
# Author: `!v g:snips_author` <`!v g:snips_author_email`>
# Copyright: `!v g:snips_company`
#
# ------------------------------------------------------------------------
# Changelog:
#
# `!v strftime("%Y")`-`!v strftime("%m")`-`!v strftime("%d")` $5: Initial version. (`!v g:snips_author_initials`)
#
###########################################################################

$7
endsnippet

snippet error_message "Error message function" b
# Print a message to stderr
#
# error_message message
error_message() {
  >&2 printf "\$@"
}
endsnippet

snippet init "Initialization function" b
USAGE="$(basename \$0) ${1:arguments}"

# Print a message to stderr
#
# error_message message
error_message() {
   >&2 printf "\$@"
}

# Check if a variable is set
#
# assert_is_set caller_name variable_name
assert_is_set() {
  if [ \$# -ne 2 ]; then
    error_message 'assert_is_set: Wrong numbers of parameters:\\n'
    error_message 'assert_is_set caller_name variable_name\\n'
    exit 1
  fi

  local caller_name="\$1"
  local variable_name="\$2"

  eval val=\\\$\$variable_name
  if [ -z "\$val" ] ; then
    error_message "\$caller_name: variable \'\$variable_name\' is not defined or empty\\n"
    exit 1
  fi
}

# Prepare run
#
# init "\$@"
init() {
  if [ \$# -ne ${2:arguments number} ]; then
    error_message "Wrong numbers of parameters (\$# instead of $2)\\n"
    error_message "\$USAGE\\n"
    exit 1
  fi

  VAR="\$1"

  assert_is_set init VAR
}

# Main block
#
# run
run() {
  # Do some stuff
}

init "\$@"
run
endsnippet

snippet eprintf
>&2 printf "$1\\n"
endsnippet

snippet readfile
while read line || [ -n "$line" ]; do
  ${2}
done < ${1}
endsnippet

snippet confirm_or_exit "Confirm or exit function" b
# Ask a user for confirmation
#
# confirm_or_exit
function confirm_or_exit() {
while true; do
  printf 'Please confirm (y or n) :\\n'
  read CONFIRM
  case \$CONFIRM in
    y|Y|YES|yes|Yes)
       break
       ;;
    n|N|no|NO|No)
      printf "Aborting - you entered \$CONFIRM\\n"
      exit 1
      ;;
    *) printf 'Please enter only y or n\\n'
  esac
done
}
endsnippet

snippet check_presence_binary "check_presence_binary function" b
# Check presence of a binary and make it executablek
#
# check_presence $binary
check_presence() {
  binary="\$1"
  if [ -r "$binary" ]; then
    if [ ! -x $binary ]; then
      echo
      echo "Making $binary executable"
      chmod +x "$binary"
    fi
  else
    echo "$binary is not present!"
    exit 1
  fi
}
endsnippet

snippet check_presence "check_presence function" b
# Check presence of a file
#
# check_presence $file
check_presence() {
  file="\$1"
  if [ ! -r "\$file" ]; then
    echo "$file is not present!"
    exit 1
  fi
}
endsnippet

# vim:ft=snippets:
